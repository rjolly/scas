// Requires : de.uni-mannheim.rz.krum#jas;2.6.5988

import scala.language.experimental.genericNumberLiterals
import edu.jas.poly.TermOrderByName
import edu.jas.poly.GenPolynomialRing
import edu.jas.poly.GenPolynomial
import jas.{ZZ, BigInteger, ring2scas, coef2poly, int2bigInt, gens}

assert(BigInteger(1) + 1 >< 1 + BigInteger(1))
{
  given r: GenPolynomialRing[BigInteger] = new GenPolynomialRing(ZZ, Array("x", "y", "z"), TermOrderByName.INVLEX)
  val Array(one, x, y, z) = r.gens
  val r__ = ring2scas; import r__.+

  assert(x + 1 >< 1 + x)
  // assert(x + 18446744073709551616 >< 18446744073709551616 + x)
  // number too large
  assert(x + BigInteger(1) >< BigInteger(1) + x)
  assert(x + BigInteger(18446744073709551616) >< BigInteger(18446744073709551616) + x)
  assert(x + one >< one + x)
  assert(x > one)
  {
    given s: GenPolynomialRing[GenPolynomial[BigInteger]] = new GenPolynomialRing(r, Array("a"), TermOrderByName.INVLEX)
    val Array(_, a) = s.gens
    val s__ = ring2scas; import s__.+

    assert(a + 1 >< 1 + a)
    assert(a + BigInteger(1) >< BigInteger(1) + a)
    assert(a + x >< x + a)
    assert(a > x)
  }
}
