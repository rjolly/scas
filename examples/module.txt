import scas.base.{BigInteger, Rational}
import scas.power.Lexicographic
import scas.module.{Array, ArrayModule}
import scas.polynomial.tree.Polynomial
import BigInteger.given
import Rational.given

val r = Polynomial(using Rational, Lexicographic[Int]("x"))
val List(x) = r.generators
import r.given

val s = ArrayModule(Rational(x))(2)
val e = s.generators
import s.given

assert (Array(1, 1%%2) >< e(0) + 1%%2 *%e(1))
assert (Array(1, x) >< e(0) + x *%e(1))
assert (2 *%e(0) >< e(0)%* 2)
assert (1%%2 *%e(0) >< e(0)%* (1%%2))
assert (x *%e(0) >< e(0)%* x)
assert (2 * x *%e(0) >< e(0)%* (2 * x))
assert (1%%2 * x *%e(0) >< e(0)%* (1%%2 * x))
assert (e(0) + e(1) >< e(0) + e(1))
assert ((2 *%e(0) + e(1)).show == Array(2, 1).show)
assert ((1%%2 *%e(0) + e(1)).show == Array(1%%2, 1).show)
assert (s.toString == Rational(x).pow(2).toString)
assert (s.math == Rational(x).pow(2).math)
