import scala.language.implicitConversions
import scas.{BigInteger, int2bigInt}
import scas.rendering.MathObject
import scas.power.Lexicographic
import scas.polynomial.TreePolynomial
import TreePolynomial.Factory.coef2poly

val r = new TreePolynomial.Factory(using BigInteger, Lexicographic[Int]("x", "y", "z"))
val List(x, y, z) = r.generators.toList
import r.given

val s = new TreePolynomial.Factory(using r, Lexicographic[Int]("a"))
val List(a) = s.generators.toList
import s.{+, given}

assert(BigInteger(1) + 1 >< 1 + BigInteger(1))
assert(x + 1 >< 1 + x)
assert(x + BigInteger(1) >< BigInteger(1) + x)
assert(a + 1 >< 1 + a)
assert(a + BigInteger(1) >< BigInteger(1) + a)
assert(a + x >< x+a)
assert((a + x).show == "x+a")
assert((a + x).math == s.math(x+a))
assert(MathObject(a + x).toString == "x+a")
