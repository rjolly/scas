import scas.rendering.MathObject
import scas.base.BigInteger
import scas.power.conversion.Lexicographic
import scas.polynomial.tree.Polynomial
import BigInteger.int2bigInt

val r = Polynomial(using BigInteger, Lexicographic[Int]("x", "y", "z"))
val List(x, y, z) = r.generators.toList
import r.given

assert(x + 1 >< 1 + x)
assert(x + BigInteger("1") >< BigInteger("1") + x)

val s = Polynomial(using BigInteger(x, y, z), Lexicographic[Int]("a"))
val List(a) = s.generators.toList
import s.given

assert(a + 1 >< 1 + a)
assert(a + BigInteger("1") >< BigInteger("1") + a)
assert(a + x >< x+a)
assert((a + x).show == "x+a")
assert((a + x).math == s.math(x+a))
assert(MathObject(a + x).toString == "x+a")
