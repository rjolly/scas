import language.experimental.modularity
import scas.base.{BigInteger, Rational}
import scas.polynomial.tree.UnivariatePolynomial
import scas.variable.Variable
import BigInteger.given
import Rational.given
import Variable.given

val r = UnivariatePolynomial(Rational)("x")
val List(x) = r.generators
import r.{gcd, modInverse, instance, coef2poly}

assert (gcd((1+x) * (1+1%%2*x), (1+1%%2*x) * (1-x)) >< 2+x)
assert ((1-x).modInverse((1+x) \ 2) >< 3%%4+1%%4*x)
