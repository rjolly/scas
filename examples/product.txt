import scas.base.{BigInteger, ModInteger}
import scas.module.{Array, ArrayModule}
import scas.structure.Product
import BigInteger.given

val r = Product(ModInteger("3"), ModInteger("5"))
import r.given

assert (Product(1, 3) + Product(1, 3) >< Product(2, 1))
assert (Product(1, 3) \ BigInteger("2") >< Product(1, 4))
assert (Product(1, 3) \ 2 >< Product(1, 4))
assert (r.toString == Product(ModInteger("3"), ModInteger("5")).toString)
assert (r.characteristic.intValue == 15)

val s = ArrayModule(Product(ModInteger("3"), ModInteger("5")))(2)
val e = s.generators
import s.given

assert (Array(Product(1, 3), Product(1, 3)) >< Product(1, 3) *%e(0) + Product(1, 3) *%e(1))
assert (Product(1, 3) *%e(0) >< e(0)%* Product(1, 3))
assert ((Product(1, 3) *%e(0) + Product(1, 3) *%e(1)).toList == Array(Product(1, 3), Product(1, 3)).toList)
assert (s == Product(ModInteger("3"), ModInteger("5")).pow(2))
