import scas.base.{BigInteger, Rational}
import scas.polynomial.tree.PolynomialOverFieldWithGB
import scas.power.DegreeReverseLexicographic
import scas.residue.Residue
import BigInteger.given
import Rational.given

val r = PolynomialOverFieldWithGB(using Rational, DegreeReverseLexicographic(0)("x", "y"))
val List(x, y) = r.generators
import r.given

val s = Residue(Rational(x, y))(2-x\2, 1-x-y\2)
import s.{ring => _, given}

assert (2 >< x\2)
assert (1 >< x+y\2)
assert (Rational("2") >< x\2)
assert (s == Rational(x, y)(2-x\2, 1-x-y\2))
